test = mapply(t.test, listOut, listIn)
listOut = list(imageData[1:step,],imageData[,(ncol(imageData)-step+1):ncol(imageData)],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step])
picDir = "../../images"
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
dir_names = lapply(dir_ann, gsub, pattern = ".xml", replacement = "")
lib = c("EBImage", "XML","dplyr")
lapply(lib, library, character.only = TRUE)
dir_XML = "../../annotations/xmls"
dir_ann = list.files(dir_XML)
dir_names = lapply(dir_ann, gsub, pattern = ".xml", replacement = "")
name = dir_names[1]
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
img = pic %>%
readImage() %>%
channel(mode = 'gray') %>%
imageData()
setwd("~/Data Science/Project3/cycle3cvd-team2/data")
img = pic %>%
readImage() %>%
channel(mode = 'gray') %>%
imageData()
name
lib = c("EBImage", "XML","dplyr")
lapply(lib, library, character.only = TRUE)
dir_XML = "../../annotations/xmls"
dir_ann = list.files(dir_XML)
dir_names = lapply(dir_ann, gsub, pattern = ".xml", replacement = "")
name = dir_names[[1]]
name
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
img = pic %>%
readImage() %>%
channel(mode = 'gray') %>%
imageData()
imageData = img
listOut = list(imageData[1:step,],imageData[,(ncol(imageData)-step+1):ncol(imageData)],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step])
step = 5
thresholdSize = 70
thresholdPValue = 0.05
listOut = list(imageData[1:step,],imageData[,(ncol(imageData)-step+1):ncol(imageData)],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step])
listOut = lapply(listOut,as.vector)
R = c(6,nrow(imageData)-5)
C = c(6,ncol(imageData)-5)
listIn = list(imageData[R[1]:(R[1]+step-1),],imageData[,(C[2]-step+1):C[2]],imageData[(R[2]-step+1):R[2],],imageData[,C[1]:(C[1]+step-1)])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn)
test
class(test)
?apply
test[,1]
PValue = apply(test, 2, `$p.value`)
PValue = apply(test, 2, `p.value`)
PValue = apply(test, 2, `$`, p.value)
PValue
PValue = test['p.value',]
PValue
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(6, nrow(imageData)-5, 6, ncol(imageData)-5)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn)
update = which.max(test['p.value',])
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue
?do.call
PValue = do.call(c,test['p.value',])
PValue
Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue
update = which.max(PValue)
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(6, nrow(imageData)-5, 6, ncol(imageData)-5)
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn)
PValue = do.call(c,test['p.value',])
}
}
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(6, nrow(imageData)-5, 6, ncol(imageData)-5)
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn)
PValue = do.call(c,test['p.value',])
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,5,50,0.05)
display(play)
play = cropBackground(imageData,5,50,0.1)
display(play)
?mmapply
?mapply
?t.test
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(6, nrow(imageData)-5, 6, ncol(imageData)-5)
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,1,50,0.1)
play = cropBackground(imageData,2,50,0.1)
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
linstIn[[1]]
listIn
listIn[[1]]
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
print("p")
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
Ind
play = cropBackground(imageData,2,50,0.1)
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
print("p")
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
play = cropBackground(imageData,2,50,0.1)
listOut[[1]]
length(listOut[[2]])
length(listOut[[3]])
length(listIn[[2]])
length(listOut[[3]])
test
PValue = do.call(c,test['p.value',])
PValue
play = cropBackground(imageData,2,50,0.1)
PValue
debugSource('~/Data Science/Project3/cycle3cvd-team2/lib/cropBackground.R')
play = cropBackground(imageData,2,50,0.1)
test
debugSource('~/Data Science/Project3/cycle3cvd-team2/lib/cropBackground.R')
test
PValue
debugSource('~/Data Science/Project3/cycle3cvd-team2/lib/cropBackground.R')
play = cropBackground(imageData,2,50,0.1)
test
PValue
test
test
PValue
PValue
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
print("p")
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(PValue) > thresholdPValue){
print("p")
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
print(test)
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
PValue
display(imageData)
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(na.omit(PValue)) > thresholdPValue){
print("p")
update = which.max(PValue)
listOut = listIn
Ind[update] = Ind[update]-(-1)^update*step
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
print(test)
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
display(play)
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(na.omit(PValue)) > thresholdPValue){
print("p")
update = which.max(PValue)
Ind[update] = Ind[update]-(-1)^update*step
if(update == 1){
listOut[[1]] = listIn[[1]]
listIn[[1]] = imageData[Ind[1]:(Ind[1]+step-1),]
}else(update == 2){
listOut[[2]] = listIn[[2]]
listIn[[2]] = imageData[(Ind[2]-step+1):Ind[2],]
}else(update == 3){
listOut[[3]] = listIn[[3]]
listIn[[3]] = imageData[,Ind[3]:(Ind[3]+step-1)]
}else(update == 4){
listOut[[4]] = listIn[[4]]
listIn[[4]] = imageData[,(Ind[4]-step+1):Ind[4]]
}
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
print(test)
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(na.omit(PValue)) > thresholdPValue){
print("p")
update = which.max(PValue)
Ind[update] = Ind[update]-(-1)^update*step
if(update == 1){
listOut[[1]] = listIn[[1]]
listIn[[1]] = imageData[Ind[1]:(Ind[1]+step-1),]
}else(update == 2){
listOut[[2]] = listIn[[2]]
listIn[[2]] = imageData[(Ind[2]-step+1):Ind[2],]
}else(update == 3){
listOut[[3]] = listIn[[3]]
listIn[[3]] = imageData[,Ind[3]:(Ind[3]+step-1)]
}else(update == 4){
listOut[[4]] = listIn[[4]]
listIn[[4]] = imageData[,(Ind[4]-step+1):Ind[4]]
}
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
print(test)
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(na.omit(PValue)) > thresholdPValue){
print("p")
update = which.max(PValue)
Ind[update] = Ind[update]-(-1)^update*step
if(update == 1){
listOut[[1]] = listIn[[1]]
listIn[[1]] = imageData[Ind[1]:(Ind[1]+step-1),]
}else(update == 2){
listOut[[2]] = listIn[[2]]
listIn[[2]] = imageData[(Ind[2]-step+1):Ind[2],]
}else(update == 3){
listOut[[3]] = listIn[[3]]
listIn[[3]] = imageData[,Ind[3]:(Ind[3]+step-1)]
}else(update == 4){
listOut[[4]] = listIn[[4]]
listIn[[4]] = imageData[,(Ind[4]-step+1):Ind[4]]
}
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
print(test)
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
play = cropBackground(imageData,2,50,0.1)
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(na.omit(PValue)) > thresholdPValue){
print("p")
update = which.max(PValue)
Ind[update] = Ind[update]-(-1)^update*step
if(update == 1){
listOut[[1]] = listIn[[1]]
listIn[[1]] = imageData[Ind[1]:(Ind[1]+step-1),]
}else(update == 2){
listOut[[2]] = listIn[[2]]
listIn[[2]] = imageData[(Ind[2]-step+1):Ind[2],]
}else(update == 3){
listOut[[3]] = listIn[[3]]
listIn[[3]] = imageData[,Ind[3]:(Ind[3]+step-1)]
}else(update == 4){
listOut[[4]] = listIn[[4]]
listIn[[4]] = imageData[,(Ind[4]-step+1):Ind[4]]
}
test = t.test(lisOut[[update]],listIn[[update]],paired = TRUE)
PValue[update] = test.PValue
print(test)
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(na.omit(PValue)) > thresholdPValue){
print("p")
update = which.max(PValue)
Ind[update] = Ind[update]-(-1)^update*step
#     if(update == 1){
#       listOut[[1]] = listIn[[1]]
#       listIn[[1]] = imageData[Ind[1]:(Ind[1]+step-1),]
#     }else(update == 2){
#       listOut[[2]] = listIn[[2]]
#       listIn[[2]] = imageData[(Ind[2]-step+1):Ind[2],]
#     }else(update == 3){
#       listOut[[3]] = listIn[[3]]
#       listIn[[3]] = imageData[,Ind[3]:(Ind[3]+step-1)]
#     }else(update == 4){
#       listOut[[4]] = listIn[[4]]
#       listIn[[4]] = imageData[,(Ind[4]-step+1):Ind[4]]
#     }
test = t.test(lisOut[[update]],listIn[[update]],paired = TRUE)
PValue[update] = test.PValue
print(test)
print(PValue)
}
return(imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]])
}
cropBackground = function(imageData,step,thresholdSize,thresholdPValue) {
listOut = list(imageData[1:step,],imageData[(nrow(imageData)-step+1):nrow(imageData),],imageData[,1:step],imageData[,(ncol(imageData)-step+1):ncol(imageData)])
listOut = lapply(listOut,as.vector)
Ind = c(1+step, nrow(imageData)-step, 1+step, ncol(imageData)-step)
listIn = list(imageData[Ind[1]:(Ind[1]+step-1),],imageData[(Ind[2]-step+1):Ind[2],],imageData[,Ind[3]:(Ind[3]+step-1)],imageData[,(Ind[4]-step+1):Ind[4]])
listIn = lapply(listIn,as.vector)
test = mapply(t.test, listOut, listIn,paired = TRUE)
PValue = do.call(c,test['p.value',])
while(Ind[2]-Ind[1] > thresholdSize && Ind[4]-Ind[3] > thresholdSize && max(na.omit(PValue)) > thresholdPValue){
print("p")
update = which.max(PValue)
Ind[update] = Ind[update]-(-1)^update*step
if(update == 1){
listOut[[1]] = listIn[[1]]
listIn[[1]] = imageData[Ind[1]:(Ind[1]+step-1),]
}else(update == 2){
listOut[[2]] = listIn[[2]]
listIn[[2]] = imageData[(Ind[2]-step+1):Ind[2],]
}else(update == 3){
listOut[[3]] = listIn[[3]]
listIn[[3]] = imageData[,Ind[3]:(Ind[3]+step-1)]
}else(update == 4){
listOut[[4]] = listIn[[4]]
listIn[[4]] = imageData[,(Ind[4]-step+1):Ind[4]]
}
test = t.test(lisOut[[update]],listIn[[update]],paired = TRUE)
PValue[update] = test.PValue
print(test)
print(PValue)
}
imageData[Ind[1]:Ind[2],Ind[3]:Ind[4]]
}
