n
nrow(case0702)
n = nrow(case0702)
predict1 = predict(fit1, data.frame(Time = 5), interval = "prediction")
se.pred = (predict1[,'upr'] - predict1[,'fit']) / qt(0.975,n-2)
se.pred
se.pred/2
detach(case0702)
attach(ex0724)
str(ex0724)
attach(ex0724)
str(ex0724)
ex0724$Canada
lm(Denmark ~ Year, ex0724)
fitDenmark = lm(Denmark ~ Year, ex0724)
fitDenmark$residuals
summary(fitDenmark)
str(ex0724)
fitUSA = lm(USA ~ Year, ex0724)
fitDenmark = lm(Denmark ~ Year, ex0724)
fitNetherlands = lm(Netherlands ~ Year, ex0724)
fitCanada = lm(Canada ~ Year, ex0724)
fitUSA = lm(USA ~ Year, ex0724)
summary(fitDenmark)
library("Sleuth3")
attach(ex0724)
fitDenmark = lm(Denmark ~ Year, ex0724)
fitNetherlands = lm(Netherlands ~ Year, ex0724)
fitCanada = lm(Canada ~ Year, ex0724)
fitUSA = lm(USA ~ Year, ex0724)
summary(fitDenmark)
play = summary(fitDenmark)
play$coefficients
dim(play$coefficients)
play$coefficients[2,3:4]
table7 = table(denmark,netherlands,canada,usa)
denmark = summary(fitDenmark)$coefficients[2,3:4]
netherlands = summary(fitNetherlands)$coefficients[2,3:4]
canada = summary(fitCanada)$coefficients[2,3:4]
usa = summary(fitUSA)$coefficients[2,3:4]
table7 = table(denmark,netherlands,canada,usa)
table7
table7 = cbind(denmark,netherlands,canada,usa)
table
table7
table7 = table(cbind(denmark,netherlands,canada,usa))
table7
table7 = cbind(denmark,netherlands,canada,usa)
table7
library(Sleuth3)
attach(ex0914)
str(ex0914)
pairs(ex0914)
fit = lm(Heart ~ Bank + Walk + Talk, ex0914)
fit
fit$residuals
plot(fit$fitted.values,fit$residuals)
summary(fit)
install.packages(lattice)
install.packages("lattice")
library(lattice)
detach(ex0914)
attach(ex0915)
?splom
str(splom)
str(ex0915)
detach(ex0915)
attach(ex0916)
Sleuth3Manual()
attach(ex0327)
str(ex0327)
?plot
library(car)
scatterplot(PollenRemoved ~ DurationOfVisit | BeeType, ex0327)
?scatterplot
scatterplot(PollenRemoved ~ DurationOfVisit | BeeType, ex0327, smoother = FALSE, reg.line = FALSE)
?logit
scatterplot(logit(PollenRemoved) ~ DurationOfVisit | BeeType, ex0327, smoother = FALSE, reg.line = FALSE)
scatterplot(logit(PollenRemoved) ~ log(DurationOfVisit) | BeeType, ex0327, smoother = FALSE, reg.line = FALSE)
fit2 = lm(logit(PollenRemoved) ~ log(DurationOfVisit) + BeeType + DurationOfVisit*BeeType)
summary(fit2)
fit2e = lm(logit(PollenRemoved) ~ log(DurationOfVisit) + BeeType)
summary(fit2e)
detach(ex0327)
attach(ex0918)
str(ex0918)
scatterplot(Females ~ Latitude, ex0918, smoother = FALSE, reg.line = FALSE)
scatterplot(Females ~ Latitude | Continent, ex0918, smoother = FALSE, reg.line = FALSE)
scatterplot(Females + Males ~ Latitude | Continent, ex0918, smoother = FALSE, reg.line = FALSE)
library(dplyr)
?mutate
data3 = ex0918 %>%
select(Continent, Latitude, Females, Males) %>%
transmutate(Continent = c(Continent, Continent), Latitude = c(Latitude, Latitude), Wings = c(Females, Males), Sex = rep(c(0,1),each = nrow(ex0918)))
data3 = ex0918 %>%
select(Continent, Latitude, Females, Males) %>%
transmute(Continent = c(Continent, Continent), Latitude = c(Latitude, Latitude), Wings = c(Females, Males), Sex = rep(c(0,1),each = nrow(ex0918)))
data3 = rbind(ex0918[,c("Continent","Latitude","Females")],ex0918[,c("Continent","Latitude","Males")])
wings = c(ex0918[,"Females"],ex0918[,"Males"])
wings
data3 = cbind(c(Continent, Continent), c(Latitude, Latitude), Wings, rep(c(0,1),each = length(Continent)))
Wings = c(Females, Males)
data3 = cbind(c(Continent, Continent), c(Latitude, Latitude), Wings, rep(c(0,1),each = length(Continent)))
data3 = data.frame(Continent = c(Continent, Continent), Latitude = c(Latitude, Latitude), Wings = Wings, Sex = as.factors(rep(c(0,1),each = length(Continent))))
data3 = data.frame(Continent = c(Continent, Continent), Latitude = c(Latitude, Latitude), Wings = Wings, Sex = as.factor(rep(c(0,1),each = length(Continent))))
str(data3)
scatterplot(Wings ~ Latitude | Continent + Sex, data3, smoother = FALSE, reg.line = FALSE)
Continent
library("ggplot")
library("ggplot2")
?ggplot
?aes
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, linetype = Sex))
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, linetype = Sex)) + geom_point()
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, shape = Sex)) + geom_point()
?aes
ggplot(data3, aes(x = Latitude, y = Wings, colour = factor(Continent), shape = Sex)) + geom_point(aes(size = 3))
str(ex0918)
pack = c("Sleuth3", "dplyr", "ggplot2", "car")
lapply(pack, library, character.only = TRUE)
pack = c("Sleuth3", "dplyr", "ggplot2", "car")
lapply(pack, library, character.only = TRUE)
attach(ex0918)
library("ggplot2")
Wings = c(Females, Males)
data3 = data.frame(Continent = c(Continent, Continent), Latitude = c(Latitude, Latitude), Wings = Wings, Sex = as.factor(rep(c(0,1),each = length(Continent))))
ggplot(data3, aes(x = Latitude, y = Wings, colour = factor(Continent), shape = Sex)) + geom_point(aes(size = 3))
str(data3)
attach(ex0918)
library("ggplot2")
Wings = c(Females, Males)
data3 = data.frame(Continent = as.factor(c(Continent, Continent)), Latitude = c(Latitude, Latitude), Wings = Wings, Sex = as.factor(rep(c(0,1),each = length(Continent))))
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, shape = Sex)) + geom_point(aes(size = 3))
fit3 = lm(Wings ~ Latitude + Continent + Sex + Continent*Sex)
str(data3)
fit3 = lm(Wings ~ Latitude + Continent + Sex + Continent*Sex, data3)
fit3
Sleuth3Manual()
detach(ex0918)
attach(ex0920)
str(ex0920)
plot(Year, Time)
fit41 = lm(Time~Year)
fit42 = lm(Time~Year + I(Year^2))
line(fit41)
abline(fit41)
abline(fit42)
lines(fit41)
lines(predict(fit42))
abline(fit41)
fit42
fit41
lines(Year,predict(fit42))
plot(Year, Time)
fit41 = lm(Time~Year)
fit42 = lm(Time~Year + I(Year^2))
abline(fit41)
lines(Year,predict(fit42))
str(ex0920)
plot(Year, Speed)
fit43 = lm(Speed~Year)
fit44 = lm(Speed~Year + I(Year^2))
abline(fit43)
lines(Year,predict(fit44))
Track
data4 = ex0920 %>%
filter(Track = "Fast" | Track = "Slow")
data4 = ex0920 %>%
filter(Track == "Fast" | Track == "Slow")
detach(ex0920)
data4 = ex0920 %>%
filter(Track == "Fast" | Track == "Slow")
data4 = ex0920 %>%
filter(Track == "Fast" | Track == "Slow")
fit4b = lm(Speed~Year + I(Year^2) + Track, data4)
fit4b
summary(fit4b)
pack = c("Sleuth3", "dplyr", "ggplot2", "car")
lapply(pack, library, character.only = TRUE)
attach(ex0920)
fit4b = lm(Speed~Year + I(Year^2) + Conditons)
str(ex0920)
fit4b = lm(Speed~Year + I(Year^2) + Conditions)
fit4b
fit4c = lm(Speed~Year + I(Year^2) + Conditons + Starters + Starters * Conditions)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters + Starters * Conditions)
summary(fit4c1)
fit4c1 = lm(Speed~Year + I(Year^2) + Conditions + Starters)
summary(fit4c1)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters + Starters * Conditions)
summary(fit4c2)
fit4c3 = lm(Speed~Year + I(Year^2) + Conditions + Starters * Conditions)
summary(fit4c3)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters + Starters * Conditions)
summary(fit4c2)
fit4c1 = lm(Speed~Year + I(Year^2) + Conditions + Starters)
summary(fit4c1)
detach(ex0920)
Sleuth3Manual()
attach(case0901)
str(case0901)
data5 = case0901 %>%
mutate(TimeI = as.factor(Time == 24))
data(case0901)
data5 = case0901 %>%
mutate(TimeI = as.factor(Time == 24))
fit5 = lm(Flowers ~ Intensity + TimeI, data5)
data5
data(case0901)
fit5 = lm(Flowers ~ Intensity + TimeI, case0901)
data(case0901)
fit5 = lm(Flowers ~ Intensity + Time, case0901)
anova(fit5)
fit5b = lm(Flowers ~ as.factor(Intensity) + Time + as.factor(Intensity)*Time, case0901)
anova(fit5b)
f.test(fit5a,fit5b)
anova(fit5a,fit5b)
fit5a = lm(Flowers ~ Intensity + Time, case0901)
anova(fit5a,fit5b)
fit5b = lm(Flowers ~ as.factor(Intensity) + Time + I(as.factor(Intensity)*Time), case0901)
anova(fit5b)
fit5b = lm(Flowers ~ as.factor(Intensity) + Time + as.factor(Intensity)*Time, case0901)
anova(fit5b)
anova(fit5a,fit5b)
anova(fit5b,fit5a)
attach(ex0914)
fit = lm(Heart ~ Bank + Walk + Talk, ex0914)
fit
summary(fit)
Sleuth3Manual()
attach(ex1028)
str(ex1028)
plot(Storms, ElNino)
attach(ex1028)
plot(Storms, ElNino)
fit6a = lm(ElNino~Storms)
abline(fit6a)
scatterplot(ElNino~Storms,ex1028, smoother = FALSE)
toNumeric = function(f){as.numeric(levels(f))[f]}
data6 = ex1028 %>%
mutate(El = toNumeric(ElNino))
data6 = ex1028 %>%
mutate(El = apply(ElNino, toNumeric))
?apply
toNumeric = function(f){as.numeric(levels(f))[f]}
data6 = ex1028 %>%
mutate(El = apply(ElNino, 1, toNumeric))
toNumeric = function(f){as.numeric(levels(f))[f]}
data6 = ex1028 %>%
mutate(El = lapply(ElNino, toNumeric))
warnings()
ElNino
scatterplot(Storms~ElNino, ex1028, smoother = FALSE)
str(ex1028)
scatterplot(Hurricanes~ElNino, ex1028, smoother = FALSE)
scatterplot(StormIndex ~ ElNino + WestAfrica + Year, ex1028, smoother = FALSE)
scatterplot(StormIndex ~ WestAfrica + ElNino + Year, ex1028, smoother = FALSE)
anova(StormIndex ~ WestAfrica + Elnino + Year)
anova(lm(StormIndex ~ WestAfrica + Elnino + Year))
anova(lm(StormIndex ~ WestAfrica + ElNino + Year))
anova(lm(StormIndex ~ WestAfrica + ElNino + Year))
scatterplot(StormIndex ~ WestAfrica + ElNino, ex1028, smoother = FALSE)
rm(list=ls())
setwd("~/Data Science/Project3/cycle3cvd-team2/data")
lib = c("EBImage", "XML","dplyr")
lapply(lib, library, character.only = TRUE)
dir_XML = "../../annotations/xmls"
dir_ann = list.files(dir_XML)
dir_names = lapply(dir_ann, gsub, pattern = ".xml", replacement = "")
xmlDir = "../../annotations/xmls"
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
picDir = "../../images"
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
name = dir_names[4]
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
img = pic %>%
readImage() %>%
channel(mode = 'gray') %>%
imageData()
rotate = function(x) t(apply(x, 2, rev))
cropBack = function(imageData,step,thresholdSize,thresholdC){
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
return(imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
}
imageData = img
display(imageData)
play = cropBack(imageData,2,100,0.95)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
while(Ind < thresholdSize && C > thresholdC){
#print("p")
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
play = cropBack(imageData,2,100,0.95)
dim(imageData)
idx
rotate = function(x) t(apply(x, 2, rev))
cropBack = function(imageData,step,thresholdSize,thresholdC){
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
return(imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
}
play = cropBack(imageData,2,100,0.95)
a = matrix(1:4,2,2)
rotate(a)
a
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageData,step,thresholdSize,thresholdC){
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
return(imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
}
a
rotate(a)
t(a)
rotate(t(a))
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageData,step,thresholdSize,thresholdC){
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
return(imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
}
play = cropBack(imageData,2,100,0.95)
display(play)
display(imageData)
display(play)
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageList,step,thresholdSize,thresholdC){
name = imageList[[2]]
imageData = imageList[[1]]
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
img = (imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
file = paste(paste("../../cropBack",name,sep = "/"), "jpg", sep = ".")
writeImage(img, file)
}
readIn = function(name, picDir) {
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
img = pic %>%
readImage() %>%
channel(mode = 'gray') %>%
imageData()
return(list(img,name))
}
names = sample(dir_names,100)
pics = lapply(names, readIn, picDir = "../../images")
lapply(pics, cropBack,step=2,thresholdSize=100,thresholdC=0.95)
dim(a)
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageList,step,thresholdRatio,thresholdC){
name = imageList[[2]]
imageData = imageList[[1]]
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
thresholdSize = min(dim(imageData))*thresholdRatio
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
img = (imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
file = paste(paste("../../cropBack",name,sep = "/"), "jpg", sep = ".")
writeImage(img, file)
}
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.95)
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageList,step,thresholdRatio,thresholdC){
name = imageList[[2]]
imageData = imageList[[1]]
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
thresholdSize = min(dim(imageData))*thresholdRatio
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
print(dim(imageData))
img = (imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
file = paste(paste("../../cropBack",name,sep = "/"), "jpg", sep = ".")
writeImage(img, file)
}
names = sample(dir_names,100)
names = names[-5]
pics = lapply(names, readIn, picDir = "../../images")
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageList,step,thresholdRatio,thresholdC){
name = imageList[[2]]
imageData = imageList[[1]]
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
thresholdSize = min(dim(imageData))*thresholdRatio
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
print(dim(imageData))
img = (imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:ncol(imageData)-idx[4]])
file = paste(paste("../../cropBack",name,sep = "/"), "jpg", sep = ".")
writeImage(img, file)
file0 = paste(paste("../../cropBack",name,sep = "/"), "0.jpg", sep = "")
writeImage(imageData,file0)
}
names = sample(dir_names,100)
names = names[-5]
pics = lapply(names, readIn, picDir = "../../images")
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.95)
names = sample(dir_names,10)
pics = lapply(names, readIn, picDir = "../../images")
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.95)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.90)
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageList,step,thresholdRatio,thresholdC){
name = imageList[[2]]
imageData = imageList[[1]]
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
thresholdSize = min(dim(imageData))*thresholdRatio
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
print(dim(imageData))
img = (imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:(ncol(imageData)-idx[4])])
file = paste(paste("../../cropBack",name,sep = "/"), "jpg", sep = ".")
writeImage(img, file)
file0 = paste(paste("../../cropBack",name,sep = "/"), "0.jpg", sep = "")
writeImage(imageData,file0)
}
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.90)
names = sample(dir_names,100)
pics = lapply(names, readIn, picDir = "../../images")
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.90)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.95)
getFace = function(name,xmlDir,picDir,saveDir){
print(name)
xml = paste(paste(xmlDir,name,sep = "/"), "xml", sep = ".")
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
ann <- xmlParse(xml)
head_box <- xmlToDataFrame(ann, nodes=getNodeSet(ann,"//annotation/object/bndbox"))
head_box = head_box %>%
lapply(toNumeric) %>%
unlist()
img = pic %>%
readImage() %>%
channel(mode = 'gray') %>%
imageData()
#print(dim(img))
#print(head_box)
head = img[head_box[1]:head_box[3], head_box[2]:head_box[4]]
if(is.null(saveDir)){
return(head)
}else{
name = paste(paste(saveDir,name,sep = "/"), "jpg", sep = ".")
writeImage(head,name)
}
}
toNumeric = function(f){as.numeric(levels(f))[f]}
lib = c("EBImage", "XML","dplyr")
lapply(lib, library, character.only = TRUE)
dir_XML = "../../annotations/xmls"
dir_ann = list.files(dir_XML)
dir_names = lapply(dir_ann, gsub, pattern = ".xml", replacement = "")
lapply(dir_names,getFace,xmlDir = "../../annotations/xmls",picDir = "../../images",saveDir = "../../Faces")
