data3 = data.frame(Continent = c(Continent, Continent), Latitude = c(Latitude, Latitude), Wings = Wings, Sex = as.factor(rep(c(0,1),each = length(Continent))))
str(data3)
scatterplot(Wings ~ Latitude | Continent + Sex, data3, smoother = FALSE, reg.line = FALSE)
Continent
library("ggplot")
library("ggplot2")
?ggplot
?aes
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, linetype = Sex))
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, linetype = Sex)) + geom_point()
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, shape = Sex)) + geom_point()
?aes
ggplot(data3, aes(x = Latitude, y = Wings, colour = factor(Continent), shape = Sex)) + geom_point(aes(size = 3))
str(ex0918)
pack = c("Sleuth3", "dplyr", "ggplot2", "car")
lapply(pack, library, character.only = TRUE)
pack = c("Sleuth3", "dplyr", "ggplot2", "car")
lapply(pack, library, character.only = TRUE)
attach(ex0918)
library("ggplot2")
Wings = c(Females, Males)
data3 = data.frame(Continent = c(Continent, Continent), Latitude = c(Latitude, Latitude), Wings = Wings, Sex = as.factor(rep(c(0,1),each = length(Continent))))
ggplot(data3, aes(x = Latitude, y = Wings, colour = factor(Continent), shape = Sex)) + geom_point(aes(size = 3))
str(data3)
attach(ex0918)
library("ggplot2")
Wings = c(Females, Males)
data3 = data.frame(Continent = as.factor(c(Continent, Continent)), Latitude = c(Latitude, Latitude), Wings = Wings, Sex = as.factor(rep(c(0,1),each = length(Continent))))
ggplot(data3, aes(x = Latitude, y = Wings, colour = Continent, shape = Sex)) + geom_point(aes(size = 3))
fit3 = lm(Wings ~ Latitude + Continent + Sex + Continent*Sex)
str(data3)
fit3 = lm(Wings ~ Latitude + Continent + Sex + Continent*Sex, data3)
fit3
Sleuth3Manual()
detach(ex0918)
attach(ex0920)
str(ex0920)
plot(Year, Time)
fit41 = lm(Time~Year)
fit42 = lm(Time~Year + I(Year^2))
line(fit41)
abline(fit41)
abline(fit42)
lines(fit41)
lines(predict(fit42))
abline(fit41)
fit42
fit41
lines(Year,predict(fit42))
plot(Year, Time)
fit41 = lm(Time~Year)
fit42 = lm(Time~Year + I(Year^2))
abline(fit41)
lines(Year,predict(fit42))
str(ex0920)
plot(Year, Speed)
fit43 = lm(Speed~Year)
fit44 = lm(Speed~Year + I(Year^2))
abline(fit43)
lines(Year,predict(fit44))
Track
data4 = ex0920 %>%
filter(Track = "Fast" | Track = "Slow")
data4 = ex0920 %>%
filter(Track == "Fast" | Track == "Slow")
detach(ex0920)
data4 = ex0920 %>%
filter(Track == "Fast" | Track == "Slow")
data4 = ex0920 %>%
filter(Track == "Fast" | Track == "Slow")
fit4b = lm(Speed~Year + I(Year^2) + Track, data4)
fit4b
summary(fit4b)
pack = c("Sleuth3", "dplyr", "ggplot2", "car")
lapply(pack, library, character.only = TRUE)
attach(ex0920)
fit4b = lm(Speed~Year + I(Year^2) + Conditons)
str(ex0920)
fit4b = lm(Speed~Year + I(Year^2) + Conditions)
fit4b
fit4c = lm(Speed~Year + I(Year^2) + Conditons + Starters + Starters * Conditions)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters + Starters * Conditions)
summary(fit4c1)
fit4c1 = lm(Speed~Year + I(Year^2) + Conditions + Starters)
summary(fit4c1)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters + Starters * Conditions)
summary(fit4c2)
fit4c3 = lm(Speed~Year + I(Year^2) + Conditions + Starters * Conditions)
summary(fit4c3)
fit4c2 = lm(Speed~Year + I(Year^2) + Conditions + Starters + Starters * Conditions)
summary(fit4c2)
fit4c1 = lm(Speed~Year + I(Year^2) + Conditions + Starters)
summary(fit4c1)
detach(ex0920)
Sleuth3Manual()
attach(case0901)
str(case0901)
data5 = case0901 %>%
mutate(TimeI = as.factor(Time == 24))
data(case0901)
data5 = case0901 %>%
mutate(TimeI = as.factor(Time == 24))
fit5 = lm(Flowers ~ Intensity + TimeI, data5)
data5
data(case0901)
fit5 = lm(Flowers ~ Intensity + TimeI, case0901)
data(case0901)
fit5 = lm(Flowers ~ Intensity + Time, case0901)
anova(fit5)
fit5b = lm(Flowers ~ as.factor(Intensity) + Time + as.factor(Intensity)*Time, case0901)
anova(fit5b)
f.test(fit5a,fit5b)
anova(fit5a,fit5b)
fit5a = lm(Flowers ~ Intensity + Time, case0901)
anova(fit5a,fit5b)
fit5b = lm(Flowers ~ as.factor(Intensity) + Time + I(as.factor(Intensity)*Time), case0901)
anova(fit5b)
fit5b = lm(Flowers ~ as.factor(Intensity) + Time + as.factor(Intensity)*Time, case0901)
anova(fit5b)
anova(fit5a,fit5b)
anova(fit5b,fit5a)
attach(ex0914)
fit = lm(Heart ~ Bank + Walk + Talk, ex0914)
fit
summary(fit)
Sleuth3Manual()
attach(ex1028)
str(ex1028)
plot(Storms, ElNino)
attach(ex1028)
plot(Storms, ElNino)
fit6a = lm(ElNino~Storms)
abline(fit6a)
scatterplot(ElNino~Storms,ex1028, smoother = FALSE)
toNumeric = function(f){as.numeric(levels(f))[f]}
data6 = ex1028 %>%
mutate(El = toNumeric(ElNino))
data6 = ex1028 %>%
mutate(El = apply(ElNino, toNumeric))
?apply
toNumeric = function(f){as.numeric(levels(f))[f]}
data6 = ex1028 %>%
mutate(El = apply(ElNino, 1, toNumeric))
toNumeric = function(f){as.numeric(levels(f))[f]}
data6 = ex1028 %>%
mutate(El = lapply(ElNino, toNumeric))
warnings()
ElNino
scatterplot(Storms~ElNino, ex1028, smoother = FALSE)
str(ex1028)
scatterplot(Hurricanes~ElNino, ex1028, smoother = FALSE)
scatterplot(StormIndex ~ ElNino + WestAfrica + Year, ex1028, smoother = FALSE)
scatterplot(StormIndex ~ WestAfrica + ElNino + Year, ex1028, smoother = FALSE)
anova(StormIndex ~ WestAfrica + Elnino + Year)
anova(lm(StormIndex ~ WestAfrica + Elnino + Year))
anova(lm(StormIndex ~ WestAfrica + ElNino + Year))
anova(lm(StormIndex ~ WestAfrica + ElNino + Year))
scatterplot(StormIndex ~ WestAfrica + ElNino, ex1028, smoother = FALSE)
a = 1:100
quantile(a,c(0.1,0.9))
quantile(a,c(0.1,0.9))[1]
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(v)
while(Ind < thresholdSize && C > thresholdC){
#print("p")
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
names = sample(dir_names,100)
setwd("~/Data Science/Project3/cycle3cvd-team2/data")
lib = c("EBImage", "XML","dplyr")
lapply(lib, library, character.only = TRUE)
dir_XML = "../../annotations/xmls"
dir_ann = list.files(dir_XML)
dir_names = lapply(dir_ann, gsub, pattern = ".xml", replacement = "")
names = sample(dir_names,100)
pics = lapply(names, readIn, picDir = "../../images")
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.95)
readIn = function(name, picDir) {
pic = paste(paste(picDir,name,sep = "/"), "jpg", sep = ".")
img = pic %>%
readImage() %>%
channel(mode = 'gray') %>%
imageData()
return(list(img,name))
}
names = sample(dir_names,100)
pics = lapply(names, readIn, picDir = "../../images")
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=7)
rotate = function(x) (apply(x, 2, rev))
cropBack = function(imageList,step,thresholdRatio,thresholdC){
name = imageList[[2]]
imageData = imageList[[1]]
imageDataU = imageData
imageDataD = rotate(imageData)
imageDataL = t(imageData)
imageDataR = rotate(imageDataL)
iList = list(imageDataU, imageDataD, imageDataL, imageDataR)
thresholdSize = min(dim(imageData))*thresholdRatio
idx = lapply(iList, cropBoundary, step=step, thresholdSize = thresholdSize,thresholdC = thresholdC)
idx = do.call(c,idx)
print(idx)
print(dim(imageData))
img = (imageData[idx[1]:(nrow(imageData)-idx[2]), idx[3]:(ncol(imageData)-idx[4])])
file = paste(paste("../../cropBack",name,sep = "/"), "jpg", sep = ".")
writeImage(img, file)
file0 = paste(paste("../../cropBack",name,sep = "/"), "0.jpg", sep = "")
writeImage(imageData,file0)
}
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=7)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(v)
while(Ind < thresholdSize && C < thresholdC){
#print("p")
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=5)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=4)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=3)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=2)
play = pics[[1]]
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=2)
play = list(pics[[1]],pics[[2]])
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(v)
while(Ind < thresholdSize && C < thresholdC){
print(C)
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=2)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=1.2)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(v)
print(C)
while(Ind < thresholdSize && C < thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=1.2)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
print(v)
C = abs(v[2]-v[1])/sd(v)
print(C)
while(Ind < thresholdSize && C < thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=2)
a = 1:100
quantile(a,c(0.1,0.9))
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
print(v)
C = abs(v[2]-v[1])/sd(Out - In)
print(C)
while(Ind < thresholdSize && C < thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
while(Ind < thresholdSize && C < thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=3)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
while(Ind < thresholdSize && C < thresholdC){
print(C)
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=3)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
while(Ind < thresholdSize && C < thresholdC){
print(C)
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
#C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=3)
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=2.5)
lapply(play, cropBack,step=2,thresholdRatio=0.4,thresholdC=2)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=2.5)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=2.5)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
while(Ind < thresholdSize && C < thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
#C = lm(Out~In)$coefficients[2]
}
return(Ind)
}
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=2.5)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=2.5)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
#   v = quantile((Out - In),c(0.1, 0.9))
#   C = abs(v[2]-v[1])/sd(Out - In)
while(Ind < thresholdSize && C < thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
#     v = quantile((Out - In),c(0.1, 0.9))
#     C = abs(v[2]-v[1])/sd(Out - In)
C = lm(Out~In)$coefficients[2]
}
C = 1
if(Ind < 5){
while(Ind < thresholdSize && C < 2.5){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
}
}
return(Ind)
}
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
#   v = quantile((Out - In),c(0.1, 0.9))
#   C = abs(v[2]-v[1])/sd(Out - In)
while(Ind < thresholdSize && C > thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
#     v = quantile((Out - In),c(0.1, 0.9))
#     C = abs(v[2]-v[1])/sd(Out - In)
C = lm(Out~In)$coefficients[2]
}
C = 1
if(Ind < 5){
while(Ind < thresholdSize && C < 2.5){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
}
}
return(Ind)
}
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.95)
lapply(pics, cropBack,step=2,thresholdRatio=0.4,thresholdC=0.95)
lapply(pics, cropBack,step=2,thresholdRatio=0.35,thresholdC=0.95)
cropBoundary = function(imageData,step,thresholdSize,thresholdC) {
Out = imageData[1:step,]
Out = apply(Out,2,mean)
Ind = 1+step
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
C = lm(Out~In)$coefficients[2]
#   v = quantile((Out - In),c(0.1, 0.9))
#   C = abs(v[2]-v[1])/sd(Out - In)
while(Ind < thresholdSize && C > thresholdC){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
#     v = quantile((Out - In),c(0.1, 0.9))
#     C = abs(v[2]-v[1])/sd(Out - In)
C = lm(Out~In)$coefficients[2]
}
C = 1
if(Ind < 5){
while(Ind < thresholdSize && C < 2.5){
Ind = Ind + step
Out = In
In = imageData[Ind:(Ind+step-1),]
In = apply(In, 2, mean)
v = quantile((Out - In),c(0.1, 0.9))
C = abs(v[2]-v[1])/sd(Out - In)
}
}
return(Ind)
}
dir_images = "../../data_train"
dir_names <- list.files(dir_images)
dir_names = lapply(dir_names, gsub, pattern = ".jpg", replacement = "")
names = sample(dir_names,100)
pics = lapply(names, readIn, picDir = "../../images")
lapply(pics, cropBack,step=2,thresholdRatio=0.35,thresholdC=0.95)
